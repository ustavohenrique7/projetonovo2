Vamos organizar esse projeto de jogo da mem√≥ria com HTML, CSS e JavaScript em etapas claras com base nos t√≥picos fornecidos:


---

Introdu√ß√£o

Este projeto √© um jogo da mem√≥ria interativo onde o jogador precisa combinar pares de emojis. Usaremos HTML para estruturar a p√°gina, CSS para criar uma est√©tica atrativa, e JavaScript para adicionar funcionalidade din√¢mica, como embaralhar os cards, aplicar efeitos, e detectar a vit√≥ria.


---

1. Criando a base do projeto

Come√ßamos com o arquivo index.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Jogo da Mem√≥ria</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div id="game-container">
    <h1>Jogo da Mem√≥ria</h1>
    <div id="game-board"></div>
    <button id="reset-btn">Reiniciar Jogo</button>
  </div>
  <script src="script.js"></script>
</body>
</html>


---

2. Come√ßando a criar seu CSS estilizado

Crie o arquivo styles.css para estilizar o layout inicial:

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: Arial, sans-serif;
}

body {
  background-color: #f0f8ff;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

#game-container {
  text-align: center;
  max-width: 600px;
}

h1 {
  margin-bottom: 20px;
}

#game-board {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 10px;
  justify-content: center;
}

.card {
  width: 70px;
  height: 70px;
  background-color: #4caf50;
  border-radius: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2rem;
  cursor: pointer;
  transform: rotateY(0deg);
  transition: transform 0.5s;
}

.hidden {
  background-color: #dcdcdc;
  color: transparent;
}

#reset-btn {
  margin-top: 20px;
  padding: 10px 20px;
  border: none;
  background-color: #ff5722;
  color: white;
  border-radius: 5px;
  cursor: pointer;
}

#reset-btn:hover {
  background-color: #e64a19;
}


---

3. Criando os cards dinamicamente

Agora, o JavaScript ser√° usado para gerar os cards com emojis aleat√≥rios.

const board = document.getElementById("game-board");
const resetButton = document.getElementById("reset-btn");

// Emojis para o jogo
const emojis = ["üçé", "üçå", "üçá", "üçì", "üçç", "üçâ", "ü•ù", "üçí"];
let cards = [];

// Fun√ß√£o para embaralhar
function shuffle(array) {
  return array.sort(() => Math.random() - 0.5);
}

// Gerar o tabuleiro de jogo
function createBoard() {
  // Duplicar e embaralhar os emojis
  const gameEmojis = shuffle([...emojis, ...emojis]);
  board.innerHTML = "";
  cards = [];

  gameEmojis.forEach((emoji, index) => {
    const card = document.createElement("div");
    card.classList.add("card", "hidden");
    card.setAttribute("data-emoji", emoji);
    card.addEventListener("click", handleCardClick);
    board.appendChild(card);
    cards.push(card);
  });
}

// Lidar com clique nos cards
let firstCard, secondCard;
function handleCardClick(event) {
  const clickedCard = event.target;

  // Evitar clicar na mesma carta duas vezes
  if (clickedCard === firstCard || !clickedCard.classList.contains("hidden")) return;

  clickedCard.classList.remove("hidden");
  clickedCard.textContent = clickedCard.getAttribute("data-emoji");

  if (!firstCard) {
    firstCard = clickedCard;
  } else {
    secondCard = clickedCard;
    checkMatch();
  }
}

// Verificar se as cartas combinam
function checkMatch() {
  const match = firstCard.getAttribute("data-emoji") === secondCard.getAttribute("data-emoji");

  if (match) {
    firstCard.removeEventListener("click", handleCardClick);
    secondCard.removeEventListener("click", handleCardClick);
    resetSelection();
    checkVictory();
  } else {
    setTimeout(() => {
      firstCard.classList.add("hidden");
      secondCard.classList.add("hidden");
      firstCard.textContent = "";
      secondCard.textContent = "";
      resetSelection();
    }, 1000);
  }
}

// Resetar sele√ß√£o de cartas
function resetSelection() {
  firstCard = null;
  secondCard = null;
}

// Verificar condi√ß√£o de vit√≥ria
function checkVictory() {
  const allMatched = cards.every(card => !card.classList.contains("hidden"));
  if (allMatched) {
    alert("Parab√©ns! Voc√™ venceu!");
  }
}

// Reiniciar jogo
resetButton.addEventListener("click", createBoard);

// Inicializar o jogo
createBoard();


---

4. Criando o efeito de rota√ß√£o nos cards

Adicione o efeito de rota√ß√£o no CSS e ajuste o JavaScript:

.card {
  transform-style: preserve-3d;
  transform: rotateY(180deg);
}

.card.hidden {
  transform: rotateY(0deg);
}


---

5. Conclus√£o

Com isso, temos um jogo de mem√≥ria funcional, estiloso e din√¢mico. Teste as funcionalidades, ajuste os estilos para personalizar o visual e explore novas ideias, como adicionar um cron√¥metro ou n√≠veis de dificuldade!

